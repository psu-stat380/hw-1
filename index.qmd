---
title: "Homework 1"
author: "[Leo Soccio]{style='background-color: yellow;'}"
toc: true
title-block-banner: true
title-block-style: default
format: html
#format: pdf
---

[Link to the Github repository](https://github.com/leosoccio/hw-1-soccio)

------------------------------------------------------------------------

::: callout-important
## Due: Sun, Jan 29, 2023 \@ 11:59pm

Please read the instructions carefully before submitting your assignment.

1.  This assignment requires you to:

    -   Upload your Quarto markdown files to a `git` repository
    -   Upload a `PDF` file on Canvas

2.  Don't collapse any code cells before submitting.

3.  Remember to make sure all your code output is rendered properly before uploading your submission.

⚠️ Please add your name to the the author information in the frontmatter before submitting your assignment.
:::

## <br><br><br><br>

## Question 1

::: callout-tip
## 20 points
:::

In this question, we will walk through the process of *forking* a `git` repository and submitting a *pull request*.

1.  Navigate to the Github repository [here](https://github.com/psu-stat380/hw-1) and fork it by clicking on the icon in the top right

![](images/fork.png)

> Provide a sensible name for your forked repository when prompted.

2.  Clone your Github repository on your local machine

    ``` bash
    $ git clone <<insert your repository url here>>
    $ cd hw-1
    ```

    Alternatively, you can use Github codespaces to get started from your repository directly.

3.  In order to activate the `R` environment for the homework, make sure you have `renv` installed beforehand. To activate the `renv` environment for this assignment, open an instance of the `R` console from within the directory and type

    ``` r
    renv::activate()
    ```

    Follow the instrutions in order to make sure that `renv` is configured correctly.

4.  Work on the *reminaing part* of this assignment as a `.qmd` file.

    -   Create a `PDF` and `HTML` file for your output by modifying the YAML frontmatter for the Quarto `.qmd` document

5.  When you're done working on your assignment, push the changes to your github repository.

6.  Navigate to the original Github repository [here](https://github.com/psu-stat380/hw-1) and submit a pull request linking to your repository.

    Remember to **include your name** in the pull request information!

If you're stuck at any step along the way, you can refer to the [official Github docs here](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork)

<br><br><br><br> <br><br><br><br> ---

## Question 2

::: callout-tip
## 30 points
:::

Consider the following vector

```{R}
my_vec <- c(
    "+0.07",
    "-0.07",
    "+0.25",
    "-0.84",
    "+0.32",
    "-0.24",
    "-0.97",
    "-0.36",
    "+1.76",
    "-0.36"
)
```

For the following questions, provide your answers in a code cell.

1.  What data type does the vector contain?

```{R}
typeof(my_vec)
# the vector contains character data
```

2.  Create two new vectors called `my_vec_double` and `my_vec_int` which converts `my_vec` to Double & Integer types, respectively,

```{R}
my_vec_double <- as.double(my_vec)
my_vec_double

my_vec_int <- as.integer(my_vec)
my_vec_int
```

3.  Create a new vector `my_vec_bool` which comprises of:

    -   `r TRUE`if an element in `my_vec_double` is $\le 0$
    -   `r FALSE` if an element in `my_vec_double` is $\ge 0$

    How many elements of `my_vec_double` are greater than zero?

```{R}
my_vec_bool <- ifelse(my_vec_double<=0,TRUE,FALSE)
my_vec_bool
length(my_vec_bool)-sum(my_vec_bool)
# while I could also simply count it, this command shows that there are 
# 4 values in my_vec_double that are greater than 0.
```

4.  Sort the values of `my_vec_double` in ascending order.

```{R}
sort(my_vec_double)
```

<br><br><br><br> <br><br><br><br> ---

## Question 3

::: callout-tip
## 50 points
:::

In this question we will get a better understanding of how `R` handles large data structures in memory.

1.  Provide `R` code to construct the following matrices: $$
    \begin{bmatrix} 
    1 & 2 & 3\\
    4 & 5 & 6\\
    7 & 8 & 9\\
    \end{bmatrix}
    \quad \text{ and } \quad
    \begin{bmatrix} 
    1 & 2 & 3 & 4 & 5 & \dots & 100\\
    1 & 4 & 9 & 16 & 25 & \dots & 10000\\
    \end{bmatrix}
    $$

::: callout-warning
## Tip

Recall the discussion in class on how `R` fills in matrices
:::

```{R}
m1 <-matrix(1:9, nrow=3, byrow = TRUE)
m1

m2 <- matrix(c(1:100,(1:100)^2), nrow=2, byrow=TRUE)
m2
```


In the next part, we will discover how knowledge of the way in which a matrix is stored in memory can inform better code choices. To this end, the following function takes an input $n$ and creates an $n \times n$ matrix with random entries.

```{R}
generate_matrix <- function(n){
    return(
        matrix(
            rnorm(n^2),
            nrow=n
        )
    )
}
```

For example:

```{R}
generate_matrix(4)
```

Let `M` be a fixed $50 \times 50$ matrix

```{R}
M <- generate_matrix(50)
mean(M)
```

2.  Write a function `row_wise_scan` which scans the entries of `M` one row after another and outputs the number of elements whose value is $\ge 0$. You can use the following **starter code**

``` {R}
row_wise_scan <- function(x){
    n <- nrow(x)
    m <- ncol(x)

    count <- 0
    for(i in 1:n){
        for(j in 1:m){
            if(x[i,j]>=0){
                count <- count + 1 
            }
        }
    }

    return(count)
}

test <- matrix(my_vec_double, nrow=2)
row_wise_scan(test)
# seems to be working, I've never used for loops before so this took a bit of googling
```

3.  Similarly, write a function `col_wise_scan` which does exactly the same thing but scans the entries of `M` one column after another

``` {R}
col_wise_scan <- function(x){
    n <- nrow(x)
    m <- ncol(x)

    count <- 0
    for(i in 1:m){
        for(j in 1:n){
            if(x[j,i]>=0){
                count <- count + 1 
            }
        }
    }

    return(count)
}
```

You can check if your code is doing what it's supposed to using the function here[^1]

[^1]: If your code is right, the following code should evaluate to be `TRUE`

    ``` {R}
    library(dplyr)
    sapply(1:100, function(i) {
        x <- generate_matrix(100)
        row_wise_scan(x) == col_wise_scan(x)
    }) %>% sum == 100
    ```

4.  Between `col_wise_scan` and `row_wise_scan`, which function do you expect to take shorter to run? Why?

I expect col_wise_scan to take a shorter amount of time. As discussed in class, R stores all entries of a column at one point in memory, so it can very quickly move from one entry in a column to another. However, because the data is organized by column, moving across a row means that R must jump around between different points in memory, causing the function to take much longer.


5.  Write a function `time_scan` which takes in a method `f` and a matrix `M` and outputs the amount of time taken to run `f(M)`

``` {R}
time_scan <- function(f, M){
    initial_time <- Sys.time()
    f(M)
    final_time <- Sys.time()
    
    total_time_taken <- final_time - initial_time
    return(total_time_taken)
}
```

Provide your output to

``` {R}
list(
    row_wise_time = time_scan(row_wise_scan, M),
    col_wise_time = time_scan(row_wise_scan, M)
)
```

Which took longer to run? row_wise_time() took longer to run as I expected.

6.  Repeat this experiment now when:
    -   `M` is a $100 \times 100$ matrix
    -   `M` is a $1000 \times 1000$ matrix
    -   `M` is a $5000 \times 5000$ matrix
    
```{R}
M100 <- generate_matrix(100)
list(
    row_wise_time = time_scan(row_wise_scan, M100),
    col_wise_time = time_scan(row_wise_scan, M100)
)
M1000 <- generate_matrix(1000)
list(
    row_wise_time = time_scan(row_wise_scan, M1000),
    col_wise_time = time_scan(row_wise_scan, M1000)
)
M5000 <- generate_matrix(5000)
list(
    row_wise_time = time_scan(row_wise_scan, M5000),
    col_wise_time = time_scan(row_wise_scan, M5000)
)
```

What can you conclude? In general, it appears that looking at a matrix column-wise is slightly faster than looking at a matrix row-wise in R. Sometimes certain runs take longer column-wise than row-wise but I think this is attributed to variability in runtime of every function due to the amount of computing power available at any time fluctuating as my computer runs other processes outside of RStudio. If I were to run these functions many times over, column-wise functions would generally take less time than row-wise functions for the same matrix.

<br><br><br><br> <br><br><br><br> ---

# Appendix

Print your `R` session information using the following command

```{R}
sessionInfo()
```
